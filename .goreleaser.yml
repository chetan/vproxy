version: 2

project_name: vproxy
before:
  hooks:
    - go mod download
builds:
  - main: ./bin/vproxy/
    env:
      - CGO_ENABLED=0
    goos:
      - linux
      - darwin
      - windows
archives:
  - name_template: '{{ .ProjectName }}_{{ .Os }}_{{ .Arch }}{{ if .Arm }}v{{ .Arm }}{{ end }}'
    format_overrides:
      - goos: windows
        format: zip

checksum:
  name_template: "checksums.txt"
snapshot:
  version_template: "{{ .Tag }}-next"
changelog:
  sort: asc
  filters:
    exclude:
      - "^docs:"
      - "^test:"
release:
  github:
    owner: jittering
    name: vproxy

brews:
  - repository:
      owner: jittering
      name: homebrew-kegs

    # Default to project name
    name: vproxy

    goarm: "6"

    url_template: "https://github.com/jittering/vproxy/releases/download/{{ .Tag }}/{{ .ArtifactName }}"

    commit_author:
      name: Chetan Sarva (via goreleaser)
      email: chetan@pixelcop.net

    directory: Formula

    homepage: "https://github.com/jittering/vproxy"
    description: "Zero-config virtual proxies with tls"

    # skip_upload: true

    # Packages your package depends on.
    dependencies:
      - name: mkcert
      - name: nss

    service: |
      run ["#{bin}/vproxy", "daemon"]
      keep_alive successful_exit: false
      working_dir "#{var}"
      log_path "#{var}/log/vproxy.log"
      error_log_path "#{var}/log/vproxy.log"

    caveats: |
      To install your local root CA:
        $ vproxy caroot --create

      vproxy data is stored in #{var}/vproxy

      The local root CA is in #{var}/vproxy/caroot;
        certs will be stored in #{var}/vproxy/cert when generated.

      See vproxy documentation for more info

    test: system "#{bin}/vproxy", "--version"

    install: |
      bin.install "vproxy"

      bash_output = Utils.safe_popen_read("#{bin}/vproxy", "bash_completion")
      (bash_completion/"vproxy").write bash_output

    post_install: |
      str = <<~EOF
            # Sample config file
            # All commented settings below are defaults

            # Enable verbose output
            #verbose = false

            [server]
            # Enable verbose output (for daemon only)
            #verbose = false

            # IP on which server will listen
            # To listen on all IPs, set listen = "0.0.0.0"
            #listen = "127.0.0.1"

            # Ports to listen on
            #http = 80
            #https = 443


            # CAROOT path
            caroot_path = "#{var}/vproxy/caroot"

            # Path where generated certificates should be stored
            cert_path = "#{var}/vproxy/cert"

            [client]
            # Enable verbose output (for client only)
            #verbose = false

            #host = "127.0.0.1"
            #http = 80

            # Use this in local config files, i.e., a .vproxy.conf file located in a
            # project folder
            #bind = ""
          EOF
          str = str.gsub(/^[\t ]+/, "") # trim leading spaces
          conf_file = "#{etc}/vproxy.conf"

          # always write new sample file
          File.open("#{conf_file}.sample", "w") do |f|
            f.puts str
          end

          # only create default conf if it doesn't already exist
          unless File.exist?(conf_file)
            File.open(conf_file, "w") do |f|
              f.puts str
            end
          end

          # setup var dir, if needed
          unless File.exist?("#{var}/vproxy")
            puts ohai_title("creating #{var}/vproxy")

            # Create/migrate caroot
            mkdir_p("#{var}/vproxy/caroot", mode: 0755)
            mkcert_caroot = `#{bin}/vproxy caroot --default`.strip
            pems = Dir.glob("#{mkcert_caroot}/*.pem")
            if pems.empty?
              puts ohai_title("caroot not found; create with: vaproxy caroot --create")
            else
              puts ohai_title("migrating caroot")
              cp(pems, "#{var}/vproxy/caroot")
            end

            # Create/migrate cert path
            puts ohai_title("created cert dir #{var}/vproxy/cert")
            mkdir_p("#{var}/vproxy/cert", mode: 0755)
            if File.exist?(old_cert_path)
              certs = Dir.glob("#{old_cert_path}/*.pem")
              puts ohai_title("migrating #{certs.size} certs")
              errs = 0
              certs.each do |cert|
                if File.readable?(cert)
                  cp(cert, "#{var}/vproxy/cert")
                else
                  errs += 1
                end
              end
              onoe("couldn't read #{errs} cert(s)") if errs.positive?
            end
          end

  - repository:
      owner: jittering
      name: homebrew-kegs

    # Default to project name
    name: vproxy-head

    goarm: "6"

    url_template: "https://github.com/jittering/vproxy/releases/download/{{ .Tag }}/{{ .ArtifactName }}"

    commit_author:
      name: Chetan Sarva (via goreleaser)
      email: chetan@pixelcop.net

    directory: Formula

    homepage: "https://github.com/jittering/vproxy"
    description: "Zero-config virtual proxies with tls"

    # skip_upload: true

    # Packages your package depends on.
    dependencies:
      - name: mkcert
      - name: nss
      - name: go

    service: |
      run ["#{bin}/vproxy", "daemon"]
      keep_alive successful_exit: false
      working_dir "#{var}"
      log_path "#{var}/log/vproxy.log"
      error_log_path "#{var}/log/vproxy.log"

    caveats: |
      To install your local root CA:
        $ vproxy caroot --create

      vproxy data is stored in #{var}/vproxy

      The local root CA is in #{var}/vproxy/caroot;
        certs will be stored in #{var}/vproxy/cert when generated.

      See vproxy documentation for more info

    test: system "#{bin}/vproxy", "--version"

    custom_block: |
      head "https://github.com/jittering/vproxy.git"

    install: |
      if build.head?
        system "go", "build", *std_go_args(output: "build/vproxy"), "./bin/vproxy"
        bin.install "build/vproxy"
      else
        bin.install "vproxy"
      end

      bash_output = Utils.safe_popen_read("#{bin}/vproxy", "bash_completion")
      (bash_completion/"vproxy").write bash_output

    post_install: |
      str = <<~EOF
            # Sample config file
            # All commented settings below are defaults

            # Enable verbose output
            #verbose = false

            [server]
            # Enable verbose output (for daemon only)
            #verbose = false

            # IP on which server will listen
            # To listen on all IPs, set listen = "0.0.0.0"
            #listen = "127.0.0.1"

            # Ports to listen on
            #http = 80
            #https = 443


            # CAROOT path
            caroot_path = "#{var}/vproxy/caroot"

            # Path where generated certificates should be stored
            cert_path = "#{var}/vproxy/cert"

            [client]
            # Enable verbose output (for client only)
            #verbose = false

            #host = "127.0.0.1"
            #http = 80

            # Use this in local config files, i.e., a .vproxy.conf file located in a
            # project folder
            #bind = ""
          EOF
          str = str.gsub(/^[\t ]+/, "") # trim leading spaces
          conf_file = "#{etc}/vproxy.conf"

          # always write new sample file
          File.open("#{conf_file}.sample", "w") do |f|
            f.puts str
          end

          # only create default conf if it doesn't already exist
          unless File.exist?(conf_file)
            File.open(conf_file, "w") do |f|
              f.puts str
            end
          end

          # setup var dir, if needed
          unless File.exist?("#{var}/vproxy")
            puts ohai_title("creating #{var}/vproxy")

            # Create/migrate caroot
            mkdir_p("#{var}/vproxy/caroot", mode: 0755)
            mkcert_caroot = `#{bin}/vproxy caroot --default`.strip
            pems = Dir.glob("#{mkcert_caroot}/*.pem")
            if pems.empty?
              puts ohai_title("caroot not found; create with: vaproxy caroot --create")
            else
              puts ohai_title("migrating caroot")
              cp(pems, "#{var}/vproxy/caroot")
            end

            # Create/migrate cert path
            puts ohai_title("created cert dir #{var}/vproxy/cert")
            mkdir_p("#{var}/vproxy/cert", mode: 0755)
            if File.exist?(old_cert_path)
              certs = Dir.glob("#{old_cert_path}/*.pem")
              puts ohai_title("migrating #{certs.size} certs")
              errs = 0
              certs.each do |cert|
                if File.readable?(cert)
                  cp(cert, "#{var}/vproxy/cert")
                else
                  errs += 1
                end
              end
              onoe("couldn't read #{errs} cert(s)") if errs.positive?
            end
          end
